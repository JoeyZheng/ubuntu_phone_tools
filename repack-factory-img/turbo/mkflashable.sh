#!/bin/bash

# Copyright (c) 2014 Canonical, Ltd.
set -e
set -x
export LC_ALL=en_US.UTF-8

DEVICE=turbo
DEVICE_FOR_UDF=turbo
DEFAULT_CHANNEL=ubuntu-touch/rc-proposed/meizu.en
CHANNEL=$DEFAULT_CHANNEL
UBUNTU_TARBALL=
VERSION_TARBALL=
CUSTOM_TARBALL=
DEVICE_TARBALL=
CHANNEL_CONF=
OUT_BASE=out/target/product/$DEVICE
IMG_OUT=$OUT_BASE/flash-parts-full
system_size=2147483648
cache_size=733991936
userdata_size=576716800
[ -z "$UDF_DOWNLOAD_CACHE" ] && UDF_DOWNLOAD_CACHE="$HOME/.cache/ubuntuimages"
[ -d $OUT_BASE ] || mkdir -p  $OUT_BASE
LOCAL_TMP=$(mktemp -d --tmpdir=$OUT_BASE --suffix=.$(basename $0))
MKTEMP="mktemp --tmpdir=$LOCAL_TMP"

# Note: the images generated by mkfs.ext4 in Ubuntu have chance to cause device stuck in reboot loop. So, the safe way is use all in-tree tools.
MAKE_EXT4FS=$PWD/make_ext4fs

# First argument must be the name of the partition
# The optional second argument is a function that is executed before packing
# the filesystem up
mkimage() {
    local name=$1
    local img_folder=`$MKTEMP -d --suffix=.$name`
    #Call optional function
    if [ $# -eq 2 ]; then
        local contents=$($2 $img_folder)
    fi

    case "$name" in
    "system")
        $MAKE_EXT4FS -s -l $system_size -L rootfs -u / $IMG_OUT/$name.img $img_folder -U $contents
    ;;
    "cache")
        $MAKE_EXT4FS -s -l $cache_size -L cache -a cache $IMG_OUT/$name.img $img_folder
    ;;
    "userdata")
        $MAKE_EXT4FS -s -l $userdata_size -L userdata -a data $IMG_OUT/$name.img $img_folder
    ;;
    esac
    rm -rf $img_folder
}



# Untar the Ubuntu and version tarballs into the system partition
# and copy the Android system.img to the container path
fill_system() {
    local img_folder=$1
    local contents=`$MKTEMP --suffix=.$FUNCNAME.contents`
    UNTAR="tar --numeric-owner --exclude=system/dev/* -C $img_folder --strip=1 -xvvpf"
    $UNTAR $UBUNTU_TARBALL >> $contents
    $UNTAR $VERSION_TARBALL >> $contents
    if [ -e "$CUSTOM_TARBALL" ]; then
        $UNTAR $CUSTOM_TARBALL >> $contents
    fi

    if [ -e "$DEVICE_TARBALL" ]; then
        $UNTAR $DEVICE_TARBALL --strip=1 system/ >> $contents
    fi

    # copy the channel configuration file.
    if [ -e "$CHANNEL_CONF" ]; then
        cp $CHANNEL_CONF $img_folder/etc/system-image/channel.ini
        echo "replaced channel.ini by $CHANNEL_CONF"
    fi
    # return the contents file which may be needed by $MAKE_EXT4FS ex. rootfs
    echo $contents
}

fill_cache() {
    local img_folder=$1
    cp $IMG_OUT/device-build $img_folder
}

usage() {
cat<< EOF

usage: $0 options

Repack factory images(for flash-tool) from sepcific channel or local tarballs. It will generate a tarball named "turbo-flash-\${content-of-device-buid}.tar.gz" which include the repacked factory images. device-build is a file which have the information of build date and the git hash which used to build.
For flash-tool, please refer to https://oem-share.canonical.com/partners/tangxi/share/support/Flash-tool/

Dependency:
    1. need ./out/host/linux-x86/bin/make_ext4fs to make images.
    2. need ubuntu-device-flash for downloading tarballs.

Options:
    -h                  Show this message
    --device            Assign which device your factory used for, use turbo for turbo. Currently only turbo is supported.
    --ubuntu-tarball    Assign which ubuntu tarball to be used
    --custom-tarball    Assign which custom tarball to be used.
    --device-tarball    Assign which device tarball to be used.
    --version-tarball   Assign which version tarball to be used.
    --autobuild         Get the latest tarballs from channel $CHANNEL then repack it to factory images. The related tarballs will be replaced if "--ubuntu-tarball", "--custom-tarball", "--device-tarball" or "--version-tarball" are assinged. It uses another tool prepare-ubuntu-packages-for-build to download files, and the target will be put in $UDF_DOWNLOAD_CACHE or "$HOME/.cache/ubuntuimages". Please refer to prepare-ubuntu-packages-for-build for detail.
    --channel           The channel you would like to pull down tarballs, if not assigned, the default cahnnel is ubuntu-touch/rc-proposed/meizu.en

    --channel-conf      the file you would like to replace /etc/system-image/channel.ini

ex. Download the latest tarballs from channel ubuntu-touch/rc-proposed automatically, then replace the channel.ini and repack to factory image.

    $ sudo ./mkflashable.sh --autobuild --channel ubuntu-touch/rc/meizu.en --channel-conf channel.ini.test

ex. Download the latest tarballs from server then repack factory images from them.

    $ ubuntu-device-flash query --show-image --device turbo --channel ubuntu-touch/rc-proposed/meizu.en
    $ wget https://system-image.ubuntu.com/pool/ubuntu-a67abf52042908313d73e8b9a65fe85f79509d1311bed4b931501ef054f2226c.tar.xz
    ...... download device tarball, customer tarball and version tarball as well.
    $ sudo $0 --device turbo --ubuntu-tarball ubuntu-a67abf52042908313d73e8b9a65fe85f79509d1311bed4b931501ef054f2226c.tar.xz --device-tarball device-0c62905e39f56e9e709657b5c44cf79b180d3c10d34dbaae2d3901444cb3b763.tar.xz --version-tarball version-6.tar.xz

     # Then get the factory images in out/target/product/turbo/flash-parts-full
     # or  "turbo-flash-\${content-of-device-buid}.tar.gz" and "turbo-flash-\${content-of-device-buid}.tar.gz.md5sum"


EOF
}

autobuild() {
    local TARBALL_PATH=$UDF_DOWNLOAD_CACHE/pool
    local VERSION_PATH=$UDF_DOWNLOAD_CACHE/$CHANNEL
    local DOWNLOAD_LOG=`$MKTEMP --suffix=.download`
    ubuntu-device-flash --download-only touch --device $DEVICE_FOR_UDF --channel $CHANNEL
    ubuntu-device-flash query --show-image --device $DEVICE_FOR_UDF --channel $CHANNEL > $DOWNLOAD_LOG
    cat $DOWNLOAD_LOG
    UBUNTU_TARBALL=$TARBALL_PATH/`cat $DOWNLOAD_LOG | grep -o -e "ubuntu-.*xz" | grep -v "/"`
    DEVICE_TARBALL=$TARBALL_PATH/`cat $DOWNLOAD_LOG | grep -o -e "device.*xz"`
    CUSTOM_TARBALL=$TARBALL_PATH/`cat $DOWNLOAD_LOG | grep -o -e "custom.*xz"`
    VERSION_TARBALL=$VERSION_PATH/$DEVICE_FOR_UDF/`cat $DOWNLOAD_LOG | grep -o -e "version.*xz"`
    rm -f $DOWNLOAD_LOG
    echo UBUNTU_TARBALL=$UBUNTU_TARBALL
    echo DEVICE_TARBALL=$DEVICE_TARBALL
    echo CUSTOM_TARBALL=$CUSTOM_TARBALL
    echo VERSION_TARBALL=$VERSION_TARBALL
}

if [ $# == 0 ];then
    usage
    exit 1
fi

# Check channel parameter first, because it used by autobuild function.
for parameter in $@
do
    [ "$SET_CHANNEL" == "1" ] && {
        CHANNEL=$parameter
        echo "CHANNEL=$CHANNEL"
        break
    }
    if [ $parameter == "--channel" ];then
        SET_CHANNEL=1
    fi
done
# Check autobuild parameter first, because of the tarball path can be replaced by user define.
for parameter in $@
do
    if [ "$parameter" == "--autobuild" ];then
        echo autobuild
        autobuild
    fi

done

while [ $# -gt 0 ]
do
    case "$1" in
        -h | --help)
            usage 0
            exit 0
            ;;
        --device)
            shift;
            DEVICE=$1
            DEVICE_FOR_UDF=$1
            [ "$DEVICE" == "turbo" ] && DEVICE=turbo
            echo set device to $DEVICE
            ;;
        --ubuntu-tarball)
            shift;
            UBUNTU_TARBALL=$1
            echo UBUNTU_TARBALL=$UBUNTU_TARBALL
            ;;
        --custom-tarball)
            shift;
            CUSTOM_TARBALL=$1
            echo CUSTOM_TARBALL=$CUSTOM_TARBALL
            ;;
        --device-tarball)
            shift;
            DEVICE_TARBALL=$1
            echo DEVICE_TARBALL=$DEVICE_TARBALL
            ;;
        --version-tarball)
            shift;
            VERSION_TARBALL=$1
            echo VERSION_TARBALL=$VERSION_TARBALL
            ;;
        --channel-conf)
            shift;
            CHANNEL_CONF=$1
            echo CHANNEL_CONF=$CHANNEL_CONF
            ;;
        *)
       esac
       shift
done


[ -e "$UBUNTU_TARBALL" ] || {
    echo "please provide an Ubuntu tarball."
    exit 1
}

[ -e "$VERSION_TARBALL" ] || {
    echo "please provide a version tarball."
    exit 1
}

if [ -d "$IMG_OUT" ]; then
    rm -rf $IMG_OUT
fi

mkdir -p $IMG_OUT

[ -e "$MAKE_EXT4FS" ] || {
    echo "[ERR]$MAKE_EXT4FS should be prepare well.\n"
    exit 1
}

if [ -e "$DEVICE_TARBALL" ]; then
    device_tmp=`$MKTEMP -d --suffix=.$(basename $DEVICE_TARBALL) `
    tar Jxf $DEVICE_TARBALL -C $device_tmp
    cp $device_tmp/blobs/* \
        $device_tmp/partitions/* \
        $device_tmp/device-build \
        $IMG_OUT
    ## Use the device-build in device tarball for track revision.
    mkimage "cache" fill_cache

    rm -rf $device_tmp
else
    echo "please provide a device tarball."
    exit 1
fi

rm -f $IMG_OUT/system.img
mkimage "system" fill_system

if [ -e "$OUT_BASE/userdata.img" ]; then
    cp $OUT_BASE/userdata.img $IMG_OUT/
else
    mkimage "userdata"
fi

rm -rf $LOCAL_TMP

# put a file to track the version of code tree which we used this time.
# Because of the built images depend on the pre-collected host tools in ubuntu/tools.
FACTORY_BUILD="`date +%Y%m%d`-`git describe  --tags --dirty --always`"
echo $FACTORY_BUILD > $IMG_OUT/factory-build

FACTORY_IMGS_TARBALL=$OUT_BASE/turbo-flash-`cat $IMG_OUT/device-build`.tar.gz
echo "generating $FACTORY_IMGS_TARBALL"
tar zcf $FACTORY_IMGS_TARBALL -C $IMG_OUT .
md5sum $FACTORY_IMGS_TARBALL > $FACTORY_IMGS_TARBALL.md5sum
echo "[Success] Please get factory images in $IMG_OUT or $FACTORY_IMGS_TARBALL"
